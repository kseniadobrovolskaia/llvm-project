#include "ISSnake.h"
#include "ISSnakeISelLowering.h"
#include "ISSnakeTargetMachine.h"
#include "MCTargetDesc/ISSnakeMCTargetDesc.h"
#include "llvm/CodeGen/MachineFrameInfo.h"
#include "llvm/CodeGen/MachineFunction.h"
#include "llvm/CodeGen/MachineInstrBuilder.h"
#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/SelectionDAG.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/CodeGen/TargetLowering.h"
#include "llvm/IR/CallingConv.h"
#include "llvm/IR/Constants.h"
#include "llvm/IR/DerivedTypes.h"
#include "llvm/IR/Function.h"
#include "llvm/IR/Intrinsics.h"
#include "llvm/IR/LLVMContext.h"
#include "llvm/Support/Compiler.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/raw_ostream.h"

using namespace llvm;

#define DEBUG_TYPE "ISSnake-isel"

namespace {

class ISSnakeDAGToDAGISel : public SelectionDAGISel {

public:
  static char ID;
  ISSnakeDAGToDAGISel() = delete;
  explicit ISSnakeDAGToDAGISel(ISSnakeTargetMachine &TM,
                               CodeGenOptLevel OptLevel)
      : SelectionDAGISel(TM, OptLevel) {
    ISSNAKE_DUMP_RED
  }

  bool runOnMachineFunction(MachineFunction &MF) override {
    ISSNAKE_DUMP_RED
    return SelectionDAGISel::runOnMachineFunction(MF);
  }

  void Select(SDNode *N) override;

// Include the pieces autogenerated from the target description.
#include "ISSnakeGenDAGISel.inc"
};
class ISSnakeDAGToDAGISelLegacy : public SelectionDAGISelLegacy {
public:
  static char ID;

  ISSnakeDAGToDAGISelLegacy(ISSnakeTargetMachine &TM, CodeGenOptLevel OptLevel)
      : SelectionDAGISelLegacy(ID, std::make_unique<ISSnakeDAGToDAGISel>(
                                       TM, OptLevel)){ISSNAKE_DUMP_RED}

        StringRef getPassName() const override {
    return "ISSnake DAG->DAG Pattern Instruction Selection";
  }
};
} // end anonymous namespace

char ISSnakeDAGToDAGISelLegacy::ID = 0;

/// This pass converts a legalized DAG into a ISSnake-specific DAG, ready for
/// instruction scheduling.
FunctionPass *llvm::createISSnakeISelDag(ISSnakeTargetMachine &TM,
                                         CodeGenOptLevel OptLevel) {
  ISSNAKE_DUMP_RED
  return new ISSnakeDAGToDAGISelLegacy(TM, OptLevel);
}

void ISSnakeDAGToDAGISel::Select(SDNode *Node) {
  ISSNAKE_DUMP_RED
  if (Node->isMachineOpcode()) {
    Node->setNodeId(-1);
    return;
  }
  SDLoc DL(Node);
  SelectCode(Node);
}
